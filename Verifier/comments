18/06 - see comments at end.

#####################################
Main > SynValid > Make scopes > parse scopes (outside in) > create vars and shit and then valid them
#####################################
comments:

Making scopes (after synvalid):
---------------------------
put each open bracket's line num in stack, when meet closing bracket, create scope from stack pop until until
the closing brackets line. create and save scope as temp scope. remove scope lines from scanned file put scope pointer where the open bracket was.
when meeting next closing bracket, repeat above steps, and set child-parent relations between new scope and temp scope.
repeat until end.
remaining lines are main scope (has no parent).



DONE - synvalid checks:
---------------
DONE - bracket matcher
DONE - curly bracket matcher (may end line)
DONE - semicolon (line end)


Parser:
----------
parser will make sure all types, names and assignments are valid (using regex) and logics.
when parsing:
parse all except methods, point to array that holds the methods to parse and parse them at end.

Static class. Generally start from the root > leaves and back out to the root.
After the scopes have been made, the structure is such that each scope holds its variables and lines for
the scopes, thus that parsing should be as such:
1. Start parsing from the top, line by line. Check if the var is contained in the scopes store, else create
	the var in its store. dont forget to check for var's seperated by comma ','.
2. When meeting method line, create its var in the store (if its not contained).
3. When meeting for/while line, go to its scope and start parsing there. when finished (may be recursive),
	return to the original scope from whence you came.
4. after finishing parsing the scope, parse its method's scope the it composes (may be recursive),
	Dont forget to make sure it has 'return;' at the end of scope.

-------------------------------------------------------------------------------------------------------------
notes:

made changes to the way exceptions are created, specific message is sent to the super() constructor to
allow getting the error message via Throwable's getMessage() method.

changed the main file to be more compact - all tries are in the same clause, catches would be set by error
type (all "1" errors will be caught in one clause, all "2" in the second, etc).

Dont forget to close the scanner when we are done with it.

